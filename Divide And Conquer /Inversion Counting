import java.util.*;

public class InversionCount {
    //function defination of inversion count
    //brute force approach
    public static int InversionCount(int[] arr, int n){
        int count = 0;
        for (int i = 0; i<n-1; i++){
            for (int j = i+1; j<n; j++){
                //property of inversion 
                //i<j
                //arr[i] >arr[j]
                if (arr[i] > arr[j]){
                    count++;
                }
            }
        }
        return count;        
    }
    //function implementation of merge procedure
    public static int mergeProcedure( int[] arr,int l,int mid,int h){
        int swap = 0;
        //swap taken extra space = O(n)
        // left and right subarray
        int[] lsubarray =  Arrays.copyOfRange(arr,l,mid+1);
        int[] rsubarray = Arrays.copyOfRange(arr,mid+1,h+1);

        int i = 0,j = 0 , k = l;

        while(i < lsubarray.length && j < rsubarray.length){
            if(lsubarray[i] <= rsubarray[j]){
                arr[k++] = lsubarray[i++];                
            }
            else{
                arr[k++] = rsubarray[j++];
                //calculate the number of swaps
                swap += (mid + 1) - (l + i);               
            }
        }
        //copy all the remaining elements
        while (i < lsubarray.length){
            arr[k++] = lsubarray[i++];
        }
        while( j < rsubarray.length){
            arr[k++] = rsubarray[j++];
        }
        return swap;
    }

    public static int InversionCountDC(int[] arr,int l,int h) {
        int count = 0;
        if(l < h){
            //divide in two subarrays
            int mid = l + (h - l)/2;

            //2. Conquer the subproblems using the recursion approach
            //left subarray
            count += InversionCountDC(arr, l, mid);
            //right subarray
            count += InversionCountDC(arr, mid+1, h);

            //3. combine the solution 
            count+= mergeProcedure(arr,l,mid,h);

        }
        return count;
    }
    public static void main(String[] args) {
        int[] arr = {1,5,2,8,3,4};
        int n = arr.length;

        int count = InversionCount(arr,n);
        int countOpt = InversionCountDC(arr,0,n-1);

        System.out.println(" The invesion count of the array in bruth force is :  "+count);
        System.out.println(" The invesion count of the array in divide and conquer is :  "+countOpt);
    }
}
